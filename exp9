//===================== EASY LEVEL =====================//

// Course.java
public class Course {
    private String courseName;
    private int duration;
    
    public Course(String courseName, int duration) {
        this.courseName = courseName;
        this.duration = duration;
    }
    
    // Getters and toString()
}

// Student.java
public class Student {
    private String name;
    private Course course;
    
    public Student(String name, Course course) {
        this.name = name;
        this.course = course;
    }
    
    // Getters and toString()
}

// AppConfig.java
@Configuration
public class AppConfig {
    @Bean
    public Course mathCourse() {
        return new Course("Mathematics", 6);
    }

    @Bean
    public Student student() {
        return new Student("John Doe", mathCourse());
    }
}

// MainApp.java
public class MainApp {
    public static void main(String[] args) {
        ApplicationContext context = 
            new AnnotationConfigApplicationContext(AppConfig.class);
        Student student = context.getBean(Student.class);
        System.out.println(student);
    }
}

//===================== MEDIUM LEVEL =====================//

// Student.java (Entity)
@Entity
@Table(name = "students")
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String name;
    private int age;
    
    // Constructors, getters, setters
}

// hibernate.cfg.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC ...>
<hibernate-configuration>
  <session-factory>
    <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
    <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/school</property>
    <property name="hibernate.connection.username">root</property>
    <property name="hibernate.connection.password">password</property>
    <property name="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</property>
    <property name="hibernate.show_sql">true</property>
    <mapping class="com.example.Student"/>
  </session-factory>
</hibernate-configuration>

// StudentDAO.java
public class StudentDAO {
    private SessionFactory sessionFactory;

    public StudentDAO() {
        sessionFactory = new Configuration()
            .configure("hibernate.cfg.xml")
            .buildSessionFactory();
    }

    public void createStudent(Student student) {
        try(Session session = sessionFactory.openSession()) {
            session.beginTransaction();
            session.save(student);
            session.getTransaction().commit();
        }
    }

    // Read, Update, Delete methods
}

// MainApp.java
public class MainApp {
    public static void main(String[] args) {
        StudentDAO dao = new StudentDAO();
        Student student = new Student("Alice", 20);
        dao.createStudent(student);
        // CRUD operations
    }
}

//===================== HARD LEVEL =====================//

// Account.java
@Entity
public class Account {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String accountNumber;
    private double balance;
    
    // Constructors, getters, setters
}

// Transaction.java
@Entity
public class Transaction {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String fromAccount;
    private String toAccount;
    private double amount;
    private LocalDateTime timestamp;
    
    // Constructors, getters, setters
}

// AppConfig.java
@Configuration
@EnableTransactionManagement
@ComponentScan(basePackages = "com.example")
public class AppConfig {
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
        ds.setUrl("jdbc:mysql://localhost:3306/bank");
        ds.setUsername("root");
        ds.setPassword("password");
        return ds;
    }

    @Bean
    public LocalSessionFactoryBean sessionFactory() {
        LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
        sessionFactory.setDataSource(dataSource());
        sessionFactory.setPackagesToScan("com.example");
        sessionFactory.setHibernateProperties(hibernateProperties());
        return sessionFactory;
    }

    private Properties hibernateProperties() {
        Properties props = new Properties();
        props.put("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect");
        props.put("hibernate.show_sql", "true");
        return props;
    }

    @Bean
    public HibernateTransactionManager transactionManager() {
        HibernateTransactionManager txManager = new HibernateTransactionManager();
        txManager.setSessionFactory(sessionFactory().getObject());
        return txManager;
    }
}

// BankService.java
@Service
public class BankService {
    @Autowired
    private SessionFactory sessionFactory;

    @Transactional
    public void transferMoney(String fromAccNum, String toAccNum, double amount) {
        Session session = sessionFactory.getCurrentSession();
        
        Account fromAccount = session.createQuery(
            "FROM Account WHERE accountNumber = :accNum", Account.class)
            .setParameter("accNum", fromAccNum)
            .uniqueResult();
        
        Account toAccount = session.createQuery(
            "FROM Account WHERE accountNumber = :accNum", Account.class)
            .setParameter("accNum", toAccNum)
            .uniqueResult();

        if(fromAccount.getBalance() < amount) {
            throw new RuntimeException("Insufficient funds");
        }

        fromAccount.setBalance(fromAccount.getBalance() - amount);
        toAccount.setBalance(toAccount.getBalance() + amount);

        Transaction transaction = new Transaction();
        transaction.setFromAccount(fromAccNum);
        transaction.setToAccount(toAccNum);
        transaction.setAmount(amount);
        transaction.setTimestamp(LocalDateTime.now());
        
        session.save(transaction);
    }
}

// MainApp.java
public class MainApp {
    public static void main(String[] args) {
        ApplicationContext context = 
            new AnnotationConfigApplicationContext(AppConfig.class);
        
        BankService bankService = context.getBean(BankService.class);
        
        // Successful transaction
        bankService.transferMoney("ACC001", "ACC002", 500);
        
        // Failed transaction (will rollback)
        try {
            bankService.transferMoney("ACC001", "ACC002", 1500);
        } catch (RuntimeException e) {
            System.out.println("Transaction failed: " + e.getMessage());
        }
    }
}
